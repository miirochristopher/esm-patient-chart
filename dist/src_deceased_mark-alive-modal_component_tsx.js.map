{"version":3,"file":"src_deceased_mark-alive-modal_component_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAA0B;AACqB;AAEO;AACsB;AACrB;AAOvD,IAAMQ,qBAAwD;QAAGC,oBAAAA,aAAaC,oBAAAA;IAC5E,IAAM,IAAQT,6DAAcA,GAApBU;IAER,IAAMC,eAAe,SAACC;QACpBA,EAAEC,cAAc;QAChBL;QACAF,oEAAgBA,CAACG,aAAa,IAAIK,mBAC/BC,IAAI,CAAC,SAACC;YACL,IAAIA,SAASC,EAAE,EAAE;gBACfT;gBACAP,oEAAYA,CAAC;oBACXiB,eAAe;oBACfC,MAAM;oBACNC,OAAOV,EAAE,eAAe;oBACxBW,UAAUX,EAAE,wBAAwB;gBACtC;YACF;QACF,GACCY,KAAK,CAAC,SAACC;YACNtB,oEAAYA,CAAC;gBACXmB,OAAOV,EAAE,iBAAiB;gBAC1BS,MAAM;gBACND,eAAe;gBACfG,QAAQ,EAAEE,kBAAAA,4BAAAA,MAAOC,OAAO;YAC1B;QACF;IACJ;IAEA,qBACE,2DAACC,2BACC,2DAACrB,sDAAWA;QAACsB,YAAYlB;QAAaY,OAAOV,EAAE,eAAe;sBAC9D,2DAACL,oDAASA,QAAEK,EAAE,sBAAsB,oEACpC,2DAACP,sDAAWA,sBACV,2DAACD,iDAAMA;QAACiB,MAAK;QAAYQ,SAASnB;OAC/BE,EAAE,MAAM,sBAEX,2DAACR,iDAAMA;QAACyB,SAAS,SAACf;mBAAMD,aAAaC;;OAAKF,EAAE,OAAO;AAI3D;AAEA,iEAAeH,kBAAkBA,EAAC","sources":["webpack://@openmrs/esm-patient-chart-app/./src/deceased/mark-alive-modal.component.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { showSnackbar } from '@openmrs/esm-framework';\nimport { Button, ModalFooter, ModalHeader, ModalBody } from '@carbon/react';\nimport { markPatientAlive } from './deceased.resource';\n\ninterface ConfirmationDialogProps {\n  closeDialog: () => void;\n  patientUuid: string;\n}\n\nconst MarkPatientAsAlive: React.FC<ConfirmationDialogProps> = ({ closeDialog, patientUuid }) => {\n  const { t } = useTranslation();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    closeDialog();\n    markPatientAlive(patientUuid, new AbortController())\n      .then((response) => {\n        if (response.ok) {\n          closeDialog();\n          showSnackbar({\n            isLowContrast: true,\n            kind: 'success',\n            title: t('markAsAlive', 'Mark As Alive'),\n            subtitle: t('setAliveSuccessfully', 'Patient has been marked alive successfully'),\n          });\n        }\n      })\n      .catch((error) => {\n        showSnackbar({\n          title: t('setAliveError', 'Error marking patient alive'),\n          kind: 'error',\n          isLowContrast: false,\n          subtitle: error?.message,\n        });\n      });\n  };\n\n  return (\n    <div>\n      <ModalHeader closeModal={closeDialog} title={t('markAsAlive', 'Mark As Alive')} />\n      <ModalBody>{t('confirmMarkAsAlive', 'Are you sure, you want to mark patient as alive?')}</ModalBody>\n      <ModalFooter>\n        <Button kind=\"secondary\" onClick={closeDialog}>\n          {t('no', 'No')}\n        </Button>\n        <Button onClick={(e) => handleSubmit(e)}>{t('yes', 'Yes')}</Button>\n      </ModalFooter>\n    </div>\n  );\n};\n\nexport default MarkPatientAsAlive;\n"],"names":["React","useTranslation","showSnackbar","Button","ModalFooter","ModalHeader","ModalBody","markPatientAlive","MarkPatientAsAlive","closeDialog","patientUuid","t","handleSubmit","e","preventDefault","AbortController","then","response","ok","isLowContrast","kind","title","subtitle","catch","error","message","div","closeModal","onClick"],"sourceRoot":""}